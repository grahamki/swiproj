{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async makeRequest(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n\n  // Morpheme analysis\n  async analyzeMorpheme(word) {\n    return this.makeRequest('/analyze-morpheme', {\n      method: 'POST',\n      body: JSON.stringify({\n        word\n      })\n    });\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","makeRequest","endpoint","options","url","config","headers","response","fetch","ok","Error","status","json","error","console","healthCheck","analyzeMorpheme","word","method","body","JSON","stringify"],"sources":["/Users/gk/webcafeland/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nclass ApiService {\n    constructor() {\n        this.baseURL = API_BASE_URL;\n    }\n\n    async makeRequest(endpoint, options = {}) {\n        const url = `${this.baseURL}${endpoint}`;\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                ...options.headers,\n            },\n            ...options,\n        };\n\n        try {\n            const response = await fetch(url, config);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('API request failed:', error);\n            throw error;\n        }\n    }\n\n    // Health check\n    async healthCheck() {\n        return this.makeRequest('/health');\n    }\n\n    // Morpheme analysis\n    async analyzeMorpheme(word) {\n        return this.makeRequest('/analyze-morpheme', {\n            method: 'POST',\n            body: JSON.stringify({ word }),\n        });\n    }\n}\n\nexport default new ApiService(); "],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,UAAU,CAAC;EACbC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAGN,YAAY;EAC/B;EAEA,MAAMO,WAAWA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACtC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,GAAGE,QAAQ,EAAE;IACxC,MAAMG,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACf,CAAC;MACD,GAAGH;IACP,CAAC;IAED,IAAI;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;MACzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC7D;MACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACf;EACJ;;EAEA;EACA,MAAME,WAAWA,CAAA,EAAG;IAChB,OAAO,IAAI,CAACd,WAAW,CAAC,SAAS,CAAC;EACtC;;EAEA;EACA,MAAMe,eAAeA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAI,CAAChB,WAAW,CAAC,mBAAmB,EAAE;MACzCiB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEJ;MAAK,CAAC;IACjC,CAAC,CAAC;EACN;AACJ;AAEA,eAAe,IAAInB,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}